@using Nop.Plugin.Misc.WarehouseManagement.Models;
@model DocumentModel

@{
    var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;   
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<div class="content-header clearfix">
    <h1 class="pull-left">
        Documenti
    </h1>
</div>
<div class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default panel-search">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-5">
                            <div class="form-group">
                                <div class="col-md-4">
                                    @Html.NopLabelFor(model => model.StartDate)
                                </div>
                                <div class="col-md-8">
                                    @Html.NopEditorFor(model => model.StartDate)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    @Html.NopLabelFor(model => model.EndDate)
                                </div>
                                <div class="col-md-8">
                                    @Html.NopEditorFor(model => model.EndDate)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    @Html.NopLabelFor(model => model.NumDoc)
                                </div>
                                <div class="col-md-8">
                                    @Html.NopEditorFor(model => model.NumDoc)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    @Html.NopLabelFor(model => model.Company)
                                </div>
                                <div class="col-md-8">
                                    @Html.NopEditorFor(model => model.Company)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-7">
                            <div class="form-group" @(Model.AvailableDocumentTypes.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                <div class="col-md-4">
                                    @Html.NopLabelFor(model => model.DocumentTypeId)
                                </div>
                                <div class="col-md-8">
                                    @Html.NopDropDownList("DocumentTypeId", Model.AvailableDocumentTypes)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-4">
                                    @Html.NopLabelFor(model => model.CustomerId)
                                </div>
                                <div class="col-md-8">
                                    <input type="text" id="search-customer-name" autocomplete="off" class="form-control" />
                                    <span id="search-customer-friendly-name"></span>
                                    <button type="button" id="search-customer-clear" class="btn bg-gray" style="display: none; margin-top: 5px;">@T("Admin.Common.Clear")</button>
                                    @Html.TextBoxFor(model => model.CustomerId, new { autocomplete = "off", style = "display:none;" })
                                </div>
                            </div>                            
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-7 col-md-offset-5">
                            <button type="button" id="search-documents" class="btn btn-primary btn-search">
                                <i class="fa fa-search"></i>
                                @T("Admin.Common.Search")
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Documents Grid -->
            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="documents-grid"></div>                    
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    var selectedIds = [];
    var reportAggregates = "";

    $(document).ready(function () {

        $('#search-documents').click(function () {            
            var grid = $('#documents-grid').data('kendoGrid');
            grid.dataSource.page(1);           
            return false;
        });

         @*$("".concat("#@Html.FieldIdFor(model => model.BillingEmail),",
            "#@Html.FieldIdFor(model => model.BillingLastName),",
            "#@Html.FieldIdFor(model => model.OrderNotes)")).keydown(function (event) {
                if (event.keyCode === 13) {
                    $("#search-orders").click();
                    return false;
                }
            });

        $("#@Html.FieldIdFor(model => model.GoDirectlyToNumber)").keydown(function(event) {
            if (event.keyCode === 13) {
                $("#go-to-order-by-number").click();
                return false;
            }
        });

        $('#mastercheckbox').click(function () {
            $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
        });

        //wire up checkboxes.
        $('#orders-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
            var $check = $(this);
            if ($check.is(":checked") == true) {
                var checked = jQuery.inArray($check.val(), selectedIds);
                if (checked == -1) {
                    //add id to selectedIds.
                    selectedIds.push($check.val());
                }
            }
            else {
                var checked = jQuery.inArray($check.val(), selectedIds);
                if (checked > -1) {
                    //remove id from selectedIds.
                    selectedIds = $.grep(selectedIds, function (item, index) {
                        return item != $check.val();
                    });
                }
            }
            updateMasterCheckbox();
        });*@

        $('#search-customer-name').autocomplete({
            delay: 500,
            minLength: 3,
            source: '@(Url.Action("CustomerSearchAutoComplete"))',
            select: function(event, ui) {
                $('#@Html.FieldIdFor(model => model.CustomerId)').val(ui.item.customerid);
                $('#search-customer-friendly-name').text(ui.item.label);
                $('#search-customer-clear').show();
                return false;
            }
        });

        //remove button
        $('#search-customer-clear').click(function() {
            $('#@Html.FieldIdFor(model => model.CustomerId)').val('0');
            $('#search-customer-friendly-name').text('');
            $('#search-customer-clear').hide();
            return false;
        });

        $("#documents-grid").kendoGrid({
            dataSource: {
                type: "json",
                transport: {
                    read: {
                        url: "@Html.Raw(Url.Action("DocumentList", "MiscDocumentManagement"))",
                        type: "POST",
                        dataType: "json",
                        data: additionalData
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors"
                },
                requestEnd: function (e) {
                    if (e.type == "read") {
                        var response = e.response;
                        if (response) {
                            //store extra data
                            reportAggregates = e.response["ExtraData"];
                        }
                    }
                },
                error: function(e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                pageSize: @(defaultGridPageSize),
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true
            },
            pageable: {
                refresh: true,
                pageSizes: [@(gridPageSizes)]
            },
            editable: {
                confirmation: "@T("Admin.Common.DeleteConfirmation")",
                mode: "inline"
            },
            scrollable: false,
            dataBound: onDataBound,
            columns: [
                {
                    field: "Number",
                    title: "Number"
                },
                {
                    field: "Company",
                    title: "Company"
                },
                {
                    field: "Id",
                    title: "Document Id"
                },
                {
                    field: "CustomerId",
                    title: "Customer Id"
                },
                {
                    field: "Date",
                    title: "Date",
                    type: "date",
                    format: "{0:G}"
                },
                {
                    field: "TypeDescription",
                    title: "Document Type"
                },
                {
                    field: "Amount",
                    title: "Amount"
                },
                {
                    field: "Id",
                    title: "Azioni",
                    width: 50,
                    template: '<div><a href="Edit/#=Id#">Apri</a>&nbsp;<a href="printdoc/#=Id#" target="_blank">Stampa</a></div>'
                }
            ]
        });
    });

    function additionalData() {
        var data = {
            StartDate: $('#@Html.FieldIdFor(model => model.StartDate)').val(),
            EndDate: $('#@Html.FieldIdFor(model => model.EndDate)').val(),
            NumDoc: $('#@Html.FieldIdFor(model => model.NumDoc)').val(),
            DocumentTypeId: $('#@Html.FieldIdFor(model => model.DocumentTypeId)').val(),
            CustomerId: $('#@Html.FieldIdFor(model => model.CustomerId)').val(),
            Company: $('#@Html.FieldIdFor(model => model.Company)').val()
        };
        addAntiForgeryToken(data);
        return data;
    }


    //public int Id { get; set; }
    //public int CustomerId { get; set; }
    //public string Number { get; set; }
    //public DateTime? Date { get; set; }
    //public DateTime? EndDateValidity { get; set; }
    //public DateTime? LastEmailDate { get; set; }
    //public string Company { get; set; }
    //public string State { get; set; }
    //public int TypeId { get; set; }
    //public string TypeDescription { get; set; }
    //public string TypeCode { get; set; }
    //public decimal? Amount { get; set; }
    //public decimal? RemainingAmout { get; set; }

    function onDataBound(e) {
        //$('#orders-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
        //    var currentId = $(this).val();
        //    var checked = jQuery.inArray(currentId, selectedIds);
        //    //set checked based on if current checkbox's value is in selectedIds.
        //    $(this).attr('checked', checked > -1);
        //});

        //updateMasterCheckbox();

        ////update order totals summary
        //if (reportAggregates != "") {
        //    for (var key in reportAggregates) {
        //        $('#aggregator-profit-block').text(reportAggregates['aggregatorprofit']);
        //        $('#aggregator-shipping-block').text(reportAggregates['aggregatorshipping']);
        //        $('#aggregator-tax-block').text(reportAggregates['aggregatortax']);
        //        $('#aggregator-total-block').text(reportAggregates['aggregatortotal']);
        //    }
        //}
    }

    //function updateMasterCheckbox() {
    //    var numChkBoxes = $('#orders-grid input[type=checkbox][id!=mastercheckbox]').length;
    //    var numChkBoxesChecked = $('#orders-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
    //    $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
    //}

</script>
}
