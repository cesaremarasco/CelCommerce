@model DocumentCoreModel
@using Nop.Plugin.Misc.WarehouseManagement.Models
<script src="~/Plugins/Misc.WarehouseManagement/Scripts/knockout-3.4.2.js"></script>
<div id="mainContentDocument">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @if (Model.Id == 0)
            {
                <span>Nuovo @Model.DocumentType.Description</span>
            }
        </h1>
        <div class="pull-right">
            <button type="submit" name="save" class="btn bg-blue">
                <i class="fa fa-floppy-o"></i>
                @T("Admin.Common.Save")
            </button>
            <button type="submit" name="save-continue" class="btn bg-blue">
                <i class="fa fa-floppy-o"></i>
                @T("Admin.Common.SaveContinue")
            </button>
        </div>
    </div>
    <!-- TabStrip -->
    <div class="content">
        <div class="form-horizontal">
            <div id="document-edit" class="nav-tabs-custom">
                <!-- Navigation Tabs -->
                <ul class="nav nav-tabs">
                    @Html.RenderBootstrapTabHeader("tab-info", @T("Plugin.Misc.WarehouseManagement.Document.Head"), true)
                    @Html.RenderBootstrapTabHeader("tab-products", @T("Plugin.Misc.WarehouseManagement.Document.Body"))
                    @if (Model.DocumentType.MultipleHead)
                    {
                        @Html.RenderBootstrapTabHeader("tab-customers", @T("Plugin.Misc.WarehouseManagement.Document.Customers"))
                    }
                </ul>
                <!-- Content Tabs -->
                <div class="tab-content">
                    @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                    @Html.RenderBootstrapTabContent("tab-products", @TabProducts())
                    @if (Model.DocumentType.MultipleHead)
                    {
                        @Html.RenderBootstrapTabContent("tab-customers", @TabCustomers())
                    }
                </div>
            </div>
        </div>
    </div>

    @helper TabInfo()
    {
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <div class="col-md-5" id="wmDocumentViewLeftContainer">
                    <div class="form-group">
                        <div class="col-md-4">
                            @T("Plugin.Misc.WarehouseManagement.Document.PaymentType")
                        </div>
                        <div class="col-md-8">
                            <select data-bind="options: LookupDocumentInfo.PaymentMethods,
                                               optionsText: 'Description',
                                               value: LookupDocumentInfo.SelectedPayment,
                                               optionsCaption: 'Choose...',
                                               event:{
                                                   change:onSelectedPaymentChanged
                                               }"
                                    class="form-control"></select>
                        </div>
                    </div>
                </div>
                <div class="col-md-7" id="wmDocumentViewRightContainer">
                    <div class="form-group">
                        <div class="col-md-4">
                            @T("Plugin.Misc.WarehouseManagement.Document.Date")
                        </div>
                        <div class="col-md-8">
                            <input id="documentDate"
                                   name="documentDate"
                                   data-role="datepicker"
                                   type="text"
                                   class="k-input"
                                   role="combobox"
                                   data-bind="value:Document.DocumentDate,
                                              events:{
                                                  change:onDocumentDateChanged
                                              }"
                                   aria-expanded="false"
                                   aria-owns="documentDate_dateview"
                                   aria-disabled="false"
                                   aria-readonly="false"
                                   style="width: 100%;">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

if (!Model.DocumentType.MultipleHead)
{
        @*<button type="button" class="btn bg-green" data-toggle="modal" data-target="#customerFind-window">
                <i class="fa fa-at"></i>
                Customer
            </button>*@
}
}
    @helper TabProducts()
    {
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body" id="productGridContainer">
                <div id="productsGrid"
                     data-role="grid"
                     data-toolbar="['create']"
                     data-bind="source: ProductsDataSource"
                     data-columns='["Description","Qty","Price","Discount","Taxes","Total", { "command": ["edit", "destroy"] }]'
                     data-editable="inline"></div>
            </div>
        </div>
    </div>
}
    @helper TabCustomers()
    {
    <div id="customersGrid"
         data-role="grid"
         data-toolbar="['create']"
         data-bind="source: customersDataSource"
         data-columns='["Name", "Surname", "Company", "Vat", { "command": ["edit", "destroy"] }]' data-editable="inline"></div>

}
    <!-- Modal Windows -->
    <div id="customerFind-window" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="customerFind-window-title">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="sendemail-window-title">@T("Admin.Customers.Customers.SendEmail")</h4>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function () {

            var customersDataSource = new kendo.data.DataSource({
                transport: {
                    read: function (operation) {
                        var data = operation.data.data || [];
                        operation.success(data);
                    },
                    create: function (object) {
                        viewModel.Customers.read({ data: viewModel.Document.Customers });
                    }
                },
                schema: {
                    model: {
                        id: "Id",
                        fields: {
                            Name: { type: "string" },
                            Surname: { type: "string" },
                            Company: { type: "string" },
                            Vat: { type: "string" }
                        }
                    }
                }
            });

            var viewModel = kendo.observable({
                Document: null,
                LookupDocumentInfo:
                {
                    SelectedPayment:null,
                    PaymentMethods:null,
                    ShippingProviders:null
                },
                onSelectedPaymentChanged: function (e) {
                    debugger;
                    var selectedProduct = this.get("SelectedPayment");
                    return kendo.stringify(selectedProduct, null, 4);
                },
                onDocumentDateChanged: function (e) {
                    debugger;
                },
                ProductsDataSource : new kendo.data.DataSource({
                        transport: {
                            read: function (operation) {
                                debugger;
                                var data = operation.data.data || [];
                                operation.success(data);
                            },
                            create: function (object) {
                                debugger;
                                viewModel.ProductsDataSource.read({ data: viewModel.Document.Rows });
                            }
                        },
                        batch: true,
                        schema: {
                            model: {
                                id: "ProductID",
                                fields: {
                                    ProductID: { type: "number", editable: false, nullable: true },
                                    Description: { type: "string" },
                                    Qty: { type: "number" },
                                    Price: { type: "number" },
                                    Discount: { type: "number" },
                                    Taxes: { type: "number" },
                                    Total: { type: "number" },
                                }
                            }
                        }
                     })
            });



            $.ajax({
                url: '@Url.Action("DocumentJsonPayLoad", "MiscDocumentManagement", new { idDocType = Model.DocumentType.Id, documentId = Model.Id })',
                type: 'GET',
                dataType: "json",
                contentType: "application/json",
                success: function (payLoad) {
                    viewModel.LookupDocumentInfo.PaymentMethods = payLoad.PaymentMethods;
                    viewModel.LookupDocumentInfo.ShippingProviders = payLoad.ShippingProviders;
                    viewModel.Document = kendo.observable(payLoad.Document);

                    kendo.bind($("#productGridContainer"), viewModel);
                    kendo.bind($("#wmDocumentViewRightContainer"), viewModel);

                    ko.applyBindings(viewModel,document.getElementById('wmDocumentViewLeftContainer'));
                    viewModel.ProductsDataSource.read({ data: viewModel.Document.Rows });
                },
                error: function (error) {
                    debugger;
                }
            })
        });

    </script>
</div>

